#include "iostream"
using namespace std ;

//data types defining 
class treenode{
	public : 
	int data; 
	treenode *left;
	treenode *right;
};

class stack{
	public : 
	stack *next;
	stack *pre;
	treenode *treeItem;
};

//linked list based stack- class to insert the treenode data 
class createstack{
	public: 
		stack *stackhead;
		stack *stkfirst;//first inserted node 
		treenode *first;
		createstack();
		void push(treenode *treenode) ; 
		void pop();
};
createstack::createstack(){
	stackhead = new stack();
	stackhead->next = NULL;
	stackhead->pre = NULL;
	stackhead->treeItem = NULL;
	
}
void createstack::push(treenode *treenode){
	//first = stackhead;
	
	stack *newnode = new stack();
	
	newnode->next = NULL;
	newnode->pre = NULL;
	newnode->treeItem =  treenode;
	cout<< "data inside the treenode : "<< newnode->treeItem->data<<endl;
	
	if (stackhead->next == NULL){
		stackhead->next = newnode;
		stkfirst = newnode;
		stkfirst->pre = stackhead;
	//	cout<<"stackhead->next"<<stackhead->next<<endl;
		first = newnode->treeItem;
		cout<<"first"<<first->data<<endl;
	}
	else{
		stack *temp = new stack();
		temp = stackhead->next;
		stackhead->next = newnode;
		newnode->pre = stackhead;
		newnode->next = temp;
		temp->pre = newnode;
		cout<<"else block runned successfully "<<endl;
	}
	
}

void createstack::pop(){
	stack *temp = new stack;
	stkfirst = stkfirst->pre;
	first = stkfirst->treeItem;
//	delete temp;
}

//class to  create the tree and insert the data 

class Binarytree{
	public:
		treenode *main;
		Binarytree();
		void insertnode(int data);
		void getdata();
		//define the stack public 
		createstack *stackobj = new createstack();
		
		treenode *currentnode = new treenode(); 
};

Binarytree::Binarytree(){
	//create the root node in the binary tree and 
	main = new treenode();
	main->data = 20;
	main->left = NULL;
	main->right = NULL;
	
//	currentnode = main;

	//push it into the stack 
	
	stackobj->push(main);

	
}

void Binarytree::insertnode(int data){

	int x;
	// take the first element in the stack and check it's left and right 


	currentnode= stackobj->first;
  while (stackobj->first != NULL)	{
  	cout<<"enter the value to insert at left to thee  :"<<stackobj->first->data<<":::::";
  	cin>>x;
  	if (x != -1){
  		treenode *temp = new treenode();
		temp->data = x;
		currentnode->left = temp;
		stackobj->push(temp);
	  }
	  
	  cout<<"enter the value to insert at right to thee  :"<<stackobj->first->data<<":::::";
	  cin>>x;
	  if(x != -1){
	  	treenode *temp = new treenode();
	  	temp->data = x;
	  	currentnode->right = temp;
	  	stackobj->push(temp);	
	  }
  		stackobj->pop();
  		currentnode= stackobj->first;
  	
}
}

void Binarytree::getdata(){
	treenode *temp = new treenode();
	temp = main;
	cout<<"temp->left->left->data"<<temp->left->data<<endl;
}
main(){
	cout<<"main function working fine "<<endl ; 
	Binarytree *obj = new Binarytree();
	obj->insertnode(10);
	obj->getdata();
}
